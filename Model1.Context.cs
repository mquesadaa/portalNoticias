//------------------------------------------------------------------------------
// <auto-generated>
//     Este código se generó a partir de una plantilla.
//
//     Los cambios manuales en este archivo pueden causar un comportamiento inesperado de la aplicación.
//     Los cambios manuales en este archivo se sobrescribirán si se regenera el código.
// </auto-generated>
//------------------------------------------------------------------------------

namespace PortalNoticias
{
    using System;
    using System.Data.Entity;
    using System.Data.Entity.Infrastructure;
    using System.Data.Entity.Core.Objects;
    using System.Linq;
    
    public partial class PortalNoticiasEntities : DbContext
    {
        public PortalNoticiasEntities()
            : base("name=PortalNoticiasEntities")
        {
        }
    
        protected override void OnModelCreating(DbModelBuilder modelBuilder)
        {
            throw new UnintentionalCodeFirstException();
        }
    
        public virtual DbSet<Archivo> Archivo { get; set; }
        public virtual DbSet<Comentario> Comentario { get; set; }
        public virtual DbSet<Noticia> Noticia { get; set; }
        public virtual DbSet<Usuario> Usuario { get; set; }
    
        public virtual int sp_MantenimientoArchivo(Nullable<byte> accion, Nullable<long> idArchivo, Nullable<long> idNoticia, string ruta, Nullable<bool> tipo)
        {
            var accionParameter = accion.HasValue ?
                new ObjectParameter("Accion", accion) :
                new ObjectParameter("Accion", typeof(byte));
    
            var idArchivoParameter = idArchivo.HasValue ?
                new ObjectParameter("IdArchivo", idArchivo) :
                new ObjectParameter("IdArchivo", typeof(long));
    
            var idNoticiaParameter = idNoticia.HasValue ?
                new ObjectParameter("IdNoticia", idNoticia) :
                new ObjectParameter("IdNoticia", typeof(long));
    
            var rutaParameter = ruta != null ?
                new ObjectParameter("Ruta", ruta) :
                new ObjectParameter("Ruta", typeof(string));
    
            var tipoParameter = tipo.HasValue ?
                new ObjectParameter("Tipo", tipo) :
                new ObjectParameter("Tipo", typeof(bool));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("sp_MantenimientoArchivo", accionParameter, idArchivoParameter, idNoticiaParameter, rutaParameter, tipoParameter);
        }
    
        public virtual int sp_MantenimientoComentario(Nullable<byte> accion, Nullable<long> idComentario, Nullable<long> idUsuario, Nullable<long> idNoticia, Nullable<System.DateTime> fecha, string texto)
        {
            var accionParameter = accion.HasValue ?
                new ObjectParameter("Accion", accion) :
                new ObjectParameter("Accion", typeof(byte));
    
            var idComentarioParameter = idComentario.HasValue ?
                new ObjectParameter("IdComentario", idComentario) :
                new ObjectParameter("IdComentario", typeof(long));
    
            var idUsuarioParameter = idUsuario.HasValue ?
                new ObjectParameter("IdUsuario", idUsuario) :
                new ObjectParameter("IdUsuario", typeof(long));
    
            var idNoticiaParameter = idNoticia.HasValue ?
                new ObjectParameter("IdNoticia", idNoticia) :
                new ObjectParameter("IdNoticia", typeof(long));
    
            var fechaParameter = fecha.HasValue ?
                new ObjectParameter("Fecha", fecha) :
                new ObjectParameter("Fecha", typeof(System.DateTime));
    
            var textoParameter = texto != null ?
                new ObjectParameter("Texto", texto) :
                new ObjectParameter("Texto", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("sp_MantenimientoComentario", accionParameter, idComentarioParameter, idUsuarioParameter, idNoticiaParameter, fechaParameter, textoParameter);
        }
    
        public virtual int sp_MantenimientoNoticia(Nullable<byte> accion, Nullable<long> idNoticia, Nullable<long> idUsuario, string titulo, string texto, string tipo, Nullable<System.DateTime> fecha)
        {
            var accionParameter = accion.HasValue ?
                new ObjectParameter("Accion", accion) :
                new ObjectParameter("Accion", typeof(byte));
    
            var idNoticiaParameter = idNoticia.HasValue ?
                new ObjectParameter("IdNoticia", idNoticia) :
                new ObjectParameter("IdNoticia", typeof(long));
    
            var idUsuarioParameter = idUsuario.HasValue ?
                new ObjectParameter("IdUsuario", idUsuario) :
                new ObjectParameter("IdUsuario", typeof(long));
    
            var tituloParameter = titulo != null ?
                new ObjectParameter("Titulo", titulo) :
                new ObjectParameter("Titulo", typeof(string));
    
            var textoParameter = texto != null ?
                new ObjectParameter("Texto", texto) :
                new ObjectParameter("Texto", typeof(string));
    
            var tipoParameter = tipo != null ?
                new ObjectParameter("Tipo", tipo) :
                new ObjectParameter("Tipo", typeof(string));
    
            var fechaParameter = fecha.HasValue ?
                new ObjectParameter("Fecha", fecha) :
                new ObjectParameter("Fecha", typeof(System.DateTime));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("sp_MantenimientoNoticia", accionParameter, idNoticiaParameter, idUsuarioParameter, tituloParameter, textoParameter, tipoParameter, fechaParameter);
        }
    
        public virtual int sp_MantenimientoUsuario(Nullable<byte> accion, Nullable<long> idUsuario, string nombreUsuario, Nullable<byte> tipoUsuario, string nombre, string apellido1, string apellido2, string clave)
        {
            var accionParameter = accion.HasValue ?
                new ObjectParameter("Accion", accion) :
                new ObjectParameter("Accion", typeof(byte));
    
            var idUsuarioParameter = idUsuario.HasValue ?
                new ObjectParameter("IdUsuario", idUsuario) :
                new ObjectParameter("IdUsuario", typeof(long));
    
            var nombreUsuarioParameter = nombreUsuario != null ?
                new ObjectParameter("NombreUsuario", nombreUsuario) :
                new ObjectParameter("NombreUsuario", typeof(string));
    
            var tipoUsuarioParameter = tipoUsuario.HasValue ?
                new ObjectParameter("TipoUsuario", tipoUsuario) :
                new ObjectParameter("TipoUsuario", typeof(byte));
    
            var nombreParameter = nombre != null ?
                new ObjectParameter("Nombre", nombre) :
                new ObjectParameter("Nombre", typeof(string));
    
            var apellido1Parameter = apellido1 != null ?
                new ObjectParameter("Apellido1", apellido1) :
                new ObjectParameter("Apellido1", typeof(string));
    
            var apellido2Parameter = apellido2 != null ?
                new ObjectParameter("Apellido2", apellido2) :
                new ObjectParameter("Apellido2", typeof(string));
    
            var claveParameter = clave != null ?
                new ObjectParameter("Clave", clave) :
                new ObjectParameter("Clave", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("sp_MantenimientoUsuario", accionParameter, idUsuarioParameter, nombreUsuarioParameter, tipoUsuarioParameter, nombreParameter, apellido1Parameter, apellido2Parameter, claveParameter);
        }
    
        public virtual ObjectResult<sp_ObtenerArchivo_Result> sp_ObtenerArchivo(Nullable<int> idArchivo)
        {
            var idArchivoParameter = idArchivo.HasValue ?
                new ObjectParameter("IdArchivo", idArchivo) :
                new ObjectParameter("IdArchivo", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<sp_ObtenerArchivo_Result>("sp_ObtenerArchivo", idArchivoParameter);
        }
    
        public virtual ObjectResult<sp_ObtenerComentario_Result> sp_ObtenerComentario(Nullable<byte> idComentario)
        {
            var idComentarioParameter = idComentario.HasValue ?
                new ObjectParameter("IdComentario", idComentario) :
                new ObjectParameter("IdComentario", typeof(byte));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<sp_ObtenerComentario_Result>("sp_ObtenerComentario", idComentarioParameter);
        }
    
        public virtual ObjectResult<sp_ObtenerNoticia_Result> sp_ObtenerNoticia(Nullable<long> idNoticia)
        {
            var idNoticiaParameter = idNoticia.HasValue ?
                new ObjectParameter("IdNoticia", idNoticia) :
                new ObjectParameter("IdNoticia", typeof(long));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<sp_ObtenerNoticia_Result>("sp_ObtenerNoticia", idNoticiaParameter);
        }
    
        public virtual ObjectResult<sp_ObtenerUsuario_Result> sp_ObtenerUsuario(Nullable<byte> accion, Nullable<long> idUsuario, string nombreUsuario, string clave)
        {
            var accionParameter = accion.HasValue ?
                new ObjectParameter("Accion", accion) :
                new ObjectParameter("Accion", typeof(byte));
    
            var idUsuarioParameter = idUsuario.HasValue ?
                new ObjectParameter("IdUsuario", idUsuario) :
                new ObjectParameter("IdUsuario", typeof(long));
    
            var nombreUsuarioParameter = nombreUsuario != null ?
                new ObjectParameter("NombreUsuario", nombreUsuario) :
                new ObjectParameter("NombreUsuario", typeof(string));
    
            var claveParameter = clave != null ?
                new ObjectParameter("Clave", clave) :
                new ObjectParameter("Clave", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<sp_ObtenerUsuario_Result>("sp_ObtenerUsuario", accionParameter, idUsuarioParameter, nombreUsuarioParameter, claveParameter);
        }
    }
}
